#!/bin/bash

build() {
  cd meg

  cargo clean

  cargo build --release

  #add the tar command based on platform.
  get_architecture

  local _arch="$RETVAL"
  local _meg="meg-nightly.$_arch"

  cd target/release

  tar -cvf "$_meg.tar.gz" meg
}

get_architecture() {

    echo  "detecting architecture"

    local _ostype="$(uname -s)"
    local _cputype="$(uname -m)"

    echo  "uname -s reports: $_ostype"
    echo  "uname -m reports: $_cputype"

    if [ "$_ostype" = Darwin -a "$_cputype" = i386 ]; then
	     # Darwin `uname -s` lies
	    if sysctl hw.optional.x86_64 | grep -q ': 1'; then
	       local _cputype=x86_64
	      fi
    fi

    case "$_ostype" in

	Linux)
	    local _ostype=linux-gnu
	    ;;


	Darwin)
	    local _ostype=apple-darwin
	    ;;

	MINGW* | MSYS*)
	    err "unimplemented windows arch detection"
	    ;;

	*)
	    err "unrecognized OS type: $_ostype"
	    ;;

    esac

    case "$_cputype" in

	i386 | i486 | i686 | i786 | x86)
            local _cputype=i686
            ;;

	x86_64 | x86-64 | x64 | amd64)
            local _cputype=x86_64
            ;;

	*)
            err "unknown CPU type: $CFG_CPUTYPE"

    esac

    # Detect 64-bit linux with 32-bit userland
    if [ $_ostype = linux-gnu -a $_cputype = x86_64 ]; then
	# $SHELL does not exist in standard 'sh', so probably only exists
	# if configure is running in an interactive bash shell. /usr/bin/env
	# exists *everywhere*.
	local _bin_to_probe="$SHELL"
	if [ -z "$_bin_to_probe" -a -e "/usr/bin/env" ]; then
	    _bin_to_probe="/usr/bin/env"
	fi
	if [ -n "$_bin_to_probe" ]; then
	    file -L "$_bin_to_probe" | grep -q "x86[_-]64"
	    if [ $? != 0 ]; then
		local _cputype=i686
	    fi
	fi
    fi

    local _arch="$_cputype-$_ostype"
    echo  "architecture is $_arch"

    RETVAL="$_arch"
}

build
